/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AllowedColorsStorage,
  AllowedColorsStorageInterface,
} from "../AllowedColorsStorage";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tribe",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "color",
        type: "uint256",
      },
    ],
    name: "isAllowedColor",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tribe",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "colors",
        type: "uint256[]",
      },
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "setAllowedColorsOnTribe",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6104f28061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063715018a61461005c5780637d6f971f146100665780638da5cb5b14610079578063968ef8f514610099578063f2fde38b146100d7575b600080fd5b6100646100ea565b005b61006461007436600461034d565b610129565b6000546040516001600160a01b0390911681526020015b60405180910390f35b6100c76100a7366004610429565b600091825260016020908152604080842092845291905290205460ff1690565b6040519015158152602001610090565b6100646100e536600461031f565b61021f565b6000546001600160a01b0316331461011d5760405162461bcd60e51b81526004016101149061044a565b60405180910390fd5b61012760006102ba565b565b6000546001600160a01b031633146101535760405162461bcd60e51b81526004016101149061044a565b6000831180156101635750600a83105b6101a85760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081d1c9a5899481c1c9bdd9a59195960521b6044820152606401610114565b60005b825181101561021957610207848483815181106101d857634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600092835260018252604080842091845291529020805460ff1916841515179055565b806102118161047f565b9150506101ab565b50505050565b6000546001600160a01b031633146102495760405162461bcd60e51b81526004016101149061044a565b6001600160a01b0381166102ae5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610114565b6102b7816102ba565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8035801515811461031a57600080fd5b919050565b600060208284031215610330578081fd5b81356001600160a01b0381168114610346578182fd5b9392505050565b600080600060608486031215610361578182fd5b8335925060208085013567ffffffffffffffff80821115610380578485fd5b818701915087601f830112610393578485fd5b8135818111156103a5576103a56104a6565b8060051b604051601f19603f830116810181811085821117156103ca576103ca6104a6565b604052828152858101935084860182860187018c10156103e8578889fd5b8895505b8386101561040a5780358552600195909501949386019386016103ec565b508097505050505050506104206040850161030a565b90509250925092565b6000806040838503121561043b578182fd5b50508035926020909101359150565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060001982141561049f57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea264697066735822122009878c667ab672fcc9e84e2b5c5a7ec072161f4d1ce0f33a4bdc39cd276e554d64736f6c63430008040033";

export class AllowedColorsStorage__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AllowedColorsStorage> {
    return super.deploy(overrides || {}) as Promise<AllowedColorsStorage>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AllowedColorsStorage {
    return super.attach(address) as AllowedColorsStorage;
  }
  connect(signer: Signer): AllowedColorsStorage__factory {
    return super.connect(signer) as AllowedColorsStorage__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AllowedColorsStorageInterface {
    return new utils.Interface(_abi) as AllowedColorsStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AllowedColorsStorage {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AllowedColorsStorage;
  }
}
